const express = require('express');
const { engine } = require('express-handlebars');
const port = 1010;
const app = express();
const session = require('express-session');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('My_database.db');




// // db.serialize(() => {
 
// //   db.run('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, email TEXT, password TEXT)');

// //   db.run('INSERT INTO users (email, password) VALUES (?, ?)', ['omer1@gmail.com', 'password123']);
// //   db.run('INSERT INTO users (email, password) VALUES (?, ?)', ['jerome@gmail.com', 'jerome456']);

 
// //   db.each('SELECT * FROM users', (err, row) => {
// //     if (err) {
// //       console.error(err.message);
// //     } else {
// //       console.log(`User ID: ${row.id}, Email: ${row.email}, Password: ${row.password}`);
// //     }
// //   });
// // });

// // db.close();
// // db.serialize(() => {
// //     db.run('CREATE TABLE IF NOT EXISTS budget (id INTEGER PRIMARY KEY, budgetName TEXT, amount REAL, userId INTEGER, FOREIGN KEY(userId) REFERENCES users(id))');
  
// //     // Insert some sample budget data with user association
// //     db.run('INSERT INTO budget (budgetName, amount, userId) VALUES (?, ?, ?)', ['Monthly Expenses', 2000.00, 1]); // Here, 1 is the user ID associated with this budget
// //     db.run('INSERT INTO budget (budgetName, amount, userId) VALUES (?, ?, ?)', ['Groceries', 400.00, 2]); // Here, 2 is the user ID associated with this budget
// //     db.run('INSERT INTO budget (budgetName, amount, userId) VALUES (?, ?, ?)', ['Entertainment', 300.00, 1]); // Here, 1 is the user ID associated with this budget
  
// //     // Query and log the budget entries with user information
// //     db.each('SELECT budget.id AS budgetId, budget.budgetName AS budgetName, budget.amount AS amount, users.id AS userId, users.email AS userEmail FROM budget INNER JOIN users ON budget.userId = users.id', (err, row) => {
// //       if (err) {
// //         console.error(err.message);
// //       } else {
// //         console.log(`Budget Entry ID: ${row.budgetId}, Name: ${row.budgetName}, Amount: $${row.amount}, User ID: ${row.userId}, User Email: ${row.userEmail}`);
// //       }
// //     });
// //   });
  

// //  db.close();
//  // Modify the categories table to include a budgetId column
// db.serialize(() => {
//     db.run('CREATE TABLE IF NOT EXISTS categories (id INTEGER PRIMARY KEY, categoryName TEXT, budgetId INTEGER, FOREIGN KEY(budgetId) REFERENCES budget(id))');
  
//     // Insert some sample category data with associated budget ID
//     db.run('INSERT INTO categories (categoryName, budgetId) VALUES (?, ?)', ['Food', 1]); // Here, 1 is the budget ID associated with this category
//     db.run('INSERT INTO categories (categoryName, budgetId) VALUES (?, ?)', ['Electronics', 2]); // Here, 2 is the budget ID associated with this category
//     db.run('INSERT INTO categories (categoryName, budgetId) VALUES (?, ?)', ['Clothing', 1]); // Here, 1 is the budget ID associated with this category
  
//     // Query and log the categories with associated budget information
//     db.each('SELECT categories.id AS categoryId, categories.categoryName AS categoryName, budget.id AS budgetId, budget.budgetName AS budgetName FROM categories INNER JOIN budget ON categories.budgetId = budget.id', (err, row) => {
//       if (err) {
//         console.error(err.message);
//       } else {
//         console.log(`Category ID: ${row.categoryId}, Name: ${row.categoryName}, Budget ID: ${row.budgetId}, Budget Name: ${row.budgetName}`);
//       }
//     });
//   });
  
// // Modify the purchases table to include a categoryId column
// db.serialize(() => {
//     db.run('CREATE TABLE IF NOT EXISTS purchases (id INTEGER PRIMARY KEY, PurchaseName TEXT, price REAL, categoryId INTEGER, FOREIGN KEY(categoryId) REFERENCES categories(id))');
  
//     // Insert some sample purchase data with associated categoryId
//     db.run('INSERT INTO purchases (PurchaseName, price, categoryId) VALUES (?, ?, ?)', ['Item 1', 10.99, 1]); // Here, 1 is the categoryId associated with this purchase
//     db.run('INSERT INTO purchases (PurchaseName, price, categoryId) VALUES (?, ?, ?)', ['Item 2', 19.95, 2]); // Here, 2 is the categoryId associated with this purchase
//     db.run('INSERT INTO purchases (PurchaseName, price, categoryId) VALUES (?, ?, ?)', ['Item 3', 5.99, 1]); // Here, 1 is the categoryId associated with this purchase
  
//     // Query and log the purchases with associated category information
//     db.each('SELECT purchases.id AS purchaseId, purchases.PurchaseName AS purchaseName, purchases.price AS purchasePrice, categories.id AS categoryId, categories.categoryName AS categoryName FROM purchases INNER JOIN categories ON purchases.categoryId = categories.id', (err, row) => {
//       if (err) {
//         console.error(err.message);
//       } else {
//         console.log(`Purchase ID: ${row.purchaseId}, Name: ${row.purchaseName}, Price: $${row.purchasePrice}, Category ID: ${row.categoryId}, Category Name: ${row.categoryName}`);
//       }
//     });
//   });
  







app.use(bodyParser.urlencoded({ extended: true }));
app.engine('handlebars', engine());
app.set('view engine', 'handlebars');
app.set('views', './views');
app.use(express.static('public'));

app.get('/', (request, response) => {
  response.render('Login.handlebars');
});




app.post('/login', (req, res) => {
  const { email, password } = req.body;

 
  db.get('SELECT * FROM users WHERE email = ? AND password = ?', [email, password], (err, user) => {
      if (err) {
          console.error(err.message);
          res.status(500).send('An error occurred.');
      } else if (user) {
        
          res.redirect('/Budget');
      } else {
          
          res.render('login', { error: 'Invalid email or password.' });
      }
  });
});
app.post('/signup', (req, res) => {
  const { email, password } = req.body;

  // Check if the email already exists in the database
  db.get('SELECT * FROM users WHERE email = ?', [email], (err, existingUser) => {
    if (err) {
      console.error(err.message);
      res.status(500).send('An error occurred.');
    } else if (existingUser) {
      // Email already exists, render the signup page with an error message
      res.render('login', { error: 'Email already exists. Please log in.' });
    } else {
      // Email does not exist, insert the new user data into the database
      db.run('INSERT INTO users (email, password) VALUES (?, ?)', [email, password], (err) => {
        if (err) {
          console.error(err.message);
          res.status(500).send('An error occurred while signing up.');
        } else {
          // Successful signup, redirect to the login page
          res.redirect('/Budget');
        }
      });
    }
  });
});


app.get('/Purchase', (req, res) => {

  db.all('SELECT * FROM purchases', (err, rows) => {
    if (err) {
      console.error(err.message);
      res.status(500).send('An error occurred.');
    } else {
     
      res.render('Purchase.handlebars', { purchases: rows });
    }
  });
});


app.post('/AddPurchase', (req, res) => {
  const { PurchaseName, price } = req.body;

 
  db.run('INSERT INTO purchases (PurchaseName, price) VALUES (?, ?)', [PurchaseName, price], (err) => {
    if (err) {
      console.error(err.message);
      res.status(500).send('An error occurred.');
    } else {
      
      db.all('SELECT * FROM purchases', (err, rows) => {
        if (err) {
          console.error(err.message);
          res.status(500).send('An error occurred.');
        } else {
         
          res.render('purchase', { purchases: rows });
        }
      });
    }
  });
});

  
  // ...

app.get('/Budget', (request, response) => {
    const userId = request.session.userId; // Retrieve the user's ID from the session
  
    if (!userId) {
      // Handle the case where the user is not authenticated
      response.status(401).send('Unauthorized');
      return;
    }
  
    db.all('SELECT * FROM budget WHERE userId = ?', [userId], (err, rows) => {
      if (err) {
        console.error(err.message);
        response.status(500).send('An error occurred.');
      } else {
        response.render('Budget.handlebars', { budgets: rows });
      }
    });
  });
  
  app.post('/AddBudget', (req, res) => {
    const { budgetName, amount } = req.body;
    const userId = req.session.userId; // Retrieve the user's ID from the session
  
    if (!userId) {
      // Handle the case where the user is not authenticated
      res.status(401).send('Unauthorized');
      return;
    }
  
    db.run('INSERT INTO budget (budgetName, amount, userId) VALUES (?, ?, ?)', [budgetName, amount, userId], (err) => {
      if (err) {
        console.error(err.message);
        res.status(500).send('An error occurred.');
      } else {
        db.all('SELECT * FROM budget WHERE userId = ?', [userId], (err, rows) => {
          if (err) {
            console.error(err.message);
            res.status(500).send('An error occurred.');
          } else {
            res.render('Budget.handlebars', { budgets: rows });
          }
        });
      }
    });
  });
  
  
  
  

  app.delete('/Budget', (req, res) => {
    const budgetId = req.params.id;
  
   
    db.run('DELETE FROM budget WHERE id = ?', budgetId, (err) => {
      if (err) {
        console.error(err.message);
        res.status(500).send('An error occurred.');
      } else {
        
        res.redirect('Budget');
      }
    });
  });
  app.put('/editBudget/:id', (req, res) => {
    const budgetId = req.params.id;
    const { editedBudgetName, editedAmount } = req.body;
  
    db.run('UPDATE budget SET budgetName = ?, amount = ? WHERE id = ?', [editedBudgetName, editedAmount, budgetId], (err) => {
      if (err) {
        console.error(err.message);
        res.status(500).send('An error occurred.');
      } else {
       
        res.redirect('/Budget');
      }
    });
  });
  


  app.get('/Category', (request, response) => {
   
    db.all('SELECT * FROM categories', (err, rows) => {
      if (err) {
        console.error(err.message);
        response.status(500).send('An error occurred.');
      } else {
        
        response.render('Category.handlebars', { categories: rows });
      }
    });
  });
  
app.post('/addCategory', (req, res) => {
    const { CategoryName, budgetId } = req.body;
  
    db.run('INSERT INTO Categories (CategoryName,budgetId) VALUES (?,?)', [CategoryName,budgetId], (err) => {
      if (err) {
        console.error(err.message);
        res.status(500).send('An error occurred.');
      } else {
       
        db.all('SELECT * FROM Categories', (err, rows) => {
          if (err) {
            console.error(err.message);
            res.status(500).send('An error occurred.');
          } else {
          
            res.render('Category', { categories: rows }); 
          }
        });
      }
    });
  });
  
app.use((req, res) => {
  res.status(404).render('404.handlebars');
});

app.listen(port, () => {
  console.log(`Server running and listening on port ${port}...`);
});




// app.get('/Purchase', (req, res) => {

//   db.all('SELECT * FROM purchases', (err, rows) => {
//     if (err) {
//       console.error(err.message);
//       res.status(500).send('An error occurred.');
//     } else {
     
//       res.render('Purchase.handlebars', { purchases: rows });
//     }
//   });
// });


// app.post('/AddPurchase', (req, res) => {
//   const { PurchaseName, price } = req.body;

 
//   db.run('INSERT INTO purchases (PurchaseName, price) VALUES (?, ?)', [PurchaseName, price], (err) => {
//     if (err) {
//       console.error(err.message);
//       res.status(500).send('An error occurred.');
//     } else {
      
//       db.all('SELECT * FROM purchases', (err, rows) => {
//         if (err) {
//           console.error(err.message);
//           res.status(500).send('An error occurred.');
//         } else {
         
//           res.render('purchase', { purchases: rows });
//         }
//       });
//     }
//   });
// });

  
  // ...




  app.get('/Category', (request, response) => {
   
    db.all('SELECT * FROM categories', (err, rows) => {
      if (err) {
        console.error(err.message);
        response.status(500).send('An error occurred.');
      } else {
        
        response.render('Category.handlebars', { categories: rows });
      }
    });
  });
  
app.post('/addCategory', (req, res) => {
    const { CategoryName, budgetId } = req.body;
  
    db.run('INSERT INTO Categories (CategoryName,budgetId) VALUES (?,?)', [CategoryName,budgetId], (err) => {
      if (err) {
        console.error(err.message);
        res.status(500).send('An error occurred.');
      } else {
       
        db.all('SELECT * FROM Categories', (err, rows) => {
          if (err) {
            console.error(err.message);
            res.status(500).send('An error occurred.');
          } else {
          
            res.render('Category', { categories: rows }); 
          }
        });
      }
    });
  });


  {{!-- 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Budget</title>
    <link rel="stylesheet" href="/css/styles-jl.css">
</head>
<div id="main">
    <div>
     {{> menu}}
</div>
<body>
    
    <form action="/AddBudget" method="POST">
        <label for="budgetName">budgetName</label>
        <input type="text" id="budgetName" name="budgetName" required>
        <br>
       <label for="amount">Amount:</label>
        <input type="number" id="amount" name="amount" required>

        <br>
        <button type="submit">Add Budget </button>
    </form>
    
    {{#each budgets}}
  <div>
    <p>Budget Name: {{budgetName}}</p>
    <p>Amount: {{amount}}</p>
    <form action="/deleteBudget/{{id}}" method="delete">
      <button type="submit">Delete</button>
    </form>
  </div>
{{/each}}
 



{{#each budgets}}
  <div>
    <p>Budget Name: {{budgetName}}</p>
    <p>Amount: {{amount}}</p>
    
    
    <button class="edit-btn">Edit</button>

    
    <form class="edit-form" action="/editBudget/{{id}}" method="POST">
      <input type="hidden" name="_method" value="PUT"> 
      <input type="text" name="editedBudgetName" placeholder="New Budget Name" required>
      <input type="number" name="editedAmount" placeholder="New Amount" required>
      <button type="submit">Save</button>
    </form>
  </div>
{{/each}}

 <script>
    document.addEventListener('DOMContentLoaded', () => {
  const editButtons = document.querySelectorAll('.edit-btn');
  editButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const editForm = button.nextElementSibling;
      editForm.classList.toggle('active');
    });
  });
});
</script>
    
</body>
</html> --}}